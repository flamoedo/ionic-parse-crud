{"version":3,"sources":["webpack:///./src/app/create/create.module.ts","webpack:///./src/app/create/create.page.html","webpack:///./src/app/create/create.page.scss","webpack:///./src/app/create/create.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEF;AAEU;AAGrD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uDAAU;KACtB;CACF,CAAC;AAYF;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAV5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,kEAAmB;gBACnB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,uDAAU,CAAC;SAC3B,CAAC;OACW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;AC7B7B,qzB;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACT;AAC2B;AACpE,IAAI,KAAK,GAAG,mBAAO,CAAC,4CAAO,CAAC,CAAC;AAQ7B;IAIE,oBAAmB,MAAc,EACvB,WAAwB;QADf,WAAM,GAAN,MAAM,CAAQ;QACvB,gBAAW,GAAX,WAAW,CAAa;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACrC,aAAa,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,cAAc,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC5C,CAAC,CAAC;IACL,CAAC;IAED,6BAAQ,GAAR;IACA,CAAC;IAGD,6BAAQ,GAAR;QAAA,iBAkBC;QAhBC,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACnD,IAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAElC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACzD,SAAS,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAE7D,SAAS,CAAC,IAAI,EAAE;aACb,IAAI,CAAC,UAAC,SAAS;YACd,sEAAsE;YACtE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,GAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnD,CAAC,EAAE,UAAC,KAAK;YACP,8DAA8D;YAC9D,yDAAyD;YACzD,KAAK,CAAC,gDAAgD,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACP,CAAC;IAlCU,UAAU;QALtB,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAK2B,sDAAM;YACV,0DAAW;OALvB,UAAU,CAoCtB;IAAD,iBAAC;CAAA;AApCsB","file":"create-create-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CreatePage } from './create.page';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CreatePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreatePage]\n})\nexport class CreatePageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button color=\\\"tertiary\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Create Info</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <form [formGroup]=\\\"infoForm\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Player Name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"player_name\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Score</ion-label>\\n      <ion-input type=\\\"number\\\" formControlName=\\\"player_score\\\"></ion-input>\\n    </ion-item>\\n    <ion-button shape=\\\"round\\\" color=\\\"secondary\\\" expand=\\\"block\\\" [disabled]=\\\"!infoForm.valid\\\" \\n    (click)=\\\"saveInfo()\\\">Save</ion-button>\\n  </form>\\n</ion-content>\\n\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nvar Parse = require('parse');\n\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.page.html',\n  styleUrls: ['./create.page.scss'],\n})\nexport class CreatePage implements OnInit {\n\n  infoForm: FormGroup;\n\n  constructor(public router: Router,\n    private formBuilder: FormBuilder) {\n    this.infoForm = this.formBuilder.group({\n      'player_name': [null, Validators.required],\n      'player_score': [null, Validators.required]\n    });\n  }\n\n  ngOnInit() {\n  }\n\n\n  saveInfo() {\n\n    const GameScore = Parse.Object.extend(\"GameScore\");\n    const gameScore = new GameScore();\n\n    gameScore.set(\"score\", this.infoForm.value.player_score);\n    gameScore.set(\"playerName\", this.infoForm.value.player_name);\n\n    gameScore.save()\n      .then((gameScore) => {\n        // Execute any logic that should take place after the object is saved.\n        this.router.navigate(['/detail/'+ gameScore.id]);\n\n      }, (error) => {\n        // Execute any logic that should take place if the save fails.\n        // error is a Parse.Error with an error code and message.\n        alert('Failed to create new object, with error code: ' + error.message);\n      });\n  }\n\n}\n"],"sourceRoot":""}